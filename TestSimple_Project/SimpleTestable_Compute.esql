

CREATE PROCEDURE SimpleTestable_Compute_ProcessLogic(IN inputReference REFERENCE, IN outputReference REFERENCE) BEGIN
		
		DECLARE suburbName CHAR;
		DECLARE unused1 CHAR;
		
		CREATE LASTCHILD OF outputReference DOMAIN ('XMLNSC');
		
		SET suburbName = inputReference.XMLNSC.SuburbName;
		
		-- disable insert until we get the MQ and odbc setup working
		-- INSERT INTO Database.Test_IIB.public.suburb_search(SUBURB_NAME, COMMENTS) VALUES(suburbName, 'stuff happened');
		-- DECLARE DSN CHAR 'Test_IIB.public';
		-- INSERT INTO Database.{DSN}.suburb_search(SUBURB_NAME, COMMENTS) VALUES(suburbName, 'stuff happened');
								
		IF (suburbName = 'Turner') THEN					
			SET outputReference.XMLNSC.Address.Postcode = '2612';
		ELSEIF (suburbName = 'Rathmines') THEN					
			SET outputReference.XMLNSC.Address.Postcode = '2322';			
		ELSEIF (suburbName = 'Hawker') THEN
			SET outputReference.XMLNSC.Address.Postcode = '2614';
		ELSEIF (suburbName = 'Crace') THEN
			SET outputReference.XMLNSC.Address.Postcode = '2911';
		ELSE			
			IF (STARTSWITH (suburbName, 'A') OR (STARTSWITH (suburbName, 'B'))) THEN
				SET outputReference.XMLNSC.Address.Postcode = '2001';
			ELSE	
				SET outputReference.XMLNSC.Address.Postcode = '-999';
			END IF;	
			
			DECLARE suburbAOrSuburbB BOOLEAN FALSE;
			SET suburbAOrSuburbB = FALSE;			
			
			IF (STARTSWITH (suburbName, 'A'))  THEN
				SET suburbAOrSuburbB = TRUE;
			END iF;
			IF (STARTSWITH (suburbName, 'B')) THEN
				SET suburbAOrSuburbB = TRUE;
			END IF;
			
			IF (suburbAOrSuburbB IS  TRUE) THEN
				SET outputReference.XMLNSC.Address.Postcode = '2001';
			ELSE	
				SET outputReference.XMLNSC.Address.Postcode = '-999';
			END IF; 			
		END IF;		
		
END;

CREATE COMPUTE MODULE SimpleTestable_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE unused2 CHAR;
		
		DECLARE inputReference REFERENCE TO InputRoot;
		DECLARE outputReference REFERENCE TO OutputRoot; 
		

		CALL SimpleTestable_Compute_ProcessLogic(inputReference, outputReference);		
		
		RETURN TRUE;
	END;
	
	

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		DECLARE unused3 CHAR;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE unused4 CHAR;
		SET OutputRoot = InputRoot;
	END;
END MODULE;
